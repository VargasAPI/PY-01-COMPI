
//CODIGO SIN LAS PRODUCCION PARA HACER LA TABLA DE SIMBOLOS
package ParserLexer;
import java_cup.runtime.*;
 
// utiliza class BasicLexerCup que genera el lexer .jflex, pequeños cambios de lo tomado de la página de cup
//cambios en parser code, init with y scan with {:
// este es el cup este es el analinzador lexico
// meter funciones en action code para la tabla de simbolos, agregar un simbolo a una tabla, generar un simbolo
// funciones java en action code
action code {:
 
    public void hola(){
        System.out.println("Iniciando lectura del codigo....");
    }
 
    public void adios(){
        System.out.println("Lectura finalizada de manera exitosa");
    }
:}
 
parser code {:
    BasicLexerCup lex;
   
    @SuppressWarnings("deprecation")
    public parser(BasicLexerCup lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


    
 
:}
 
init with {: :};
 
/* define how to connect to the scanner! */
scan with {: return lex.next_token(); :}
 


/* Terminales (tokens retornados por el scanner). */
/*definicion de tipos*/
terminal L_INTEGER, L_STRING, IDENTIFICADOR, L_FLOAT, L_CHAR;
 /*tipos*/
terminal INTEGER_T, STRING_T, CHAR_T, FLOAT_T, BOLEANO_T, VOID_T; 
/*boleano*/
terminal FALSE_T, TRUE_T;   
/*signo*/
terminal SUMA_T,RESTA_T, MULTIPLICACION_T,POTENCIA_T, DIVISION_T, MODULO_T;
/*operadores relacionales*/ 
terminal COMPARACION_T, DIFERENTE_T, MAYOR_IGUAL_T, MENOR_IGUAL_T, MAYOR_T, MENOR_T;
/*signos de comparacion*/
terminal MAS_IGUAL_T, MENOS_IGUAL_T, ASIGNA, DIV_IGUAL_T, MOD_IGUAL_T, POT_IGUAL_T;
/*signos unitarios*/
terminal INCREMENTO_T, DECREMENTO_T;
/*operadores logaritmicos y negacion*/
terminal CONJUNCION_T, NEGACION_T, DISYUNCION_T; 
/*estructuras de control*/ 
terminal IF_T, ELSE_T,  DO_T, ELIF_T, WHILE_T, FOR_T;
/*sentencias de control*/
terminal RETURN_T,BREAK_T, CIN_T, COUT_T;
/*OTROS SIGNOS*/
terminal OP_INSERT_T, OP_EXTRACT_T;
terminal FINLINEA, COMA, PARENTESIS_I,PARENTESIS_D, LLAVE_ABIERTO_T, LLAVE_CERRADO_T;
terminal PIPE, CORCHETE_D, CORCHETE_I;

// no terminales

non terminal tipoFunc, tipo, signo, signoComp, operadorRel, operadorLog, boleano;
non terminal sigUnitario;

non terminal cajaArray, defArray, array;
non terminal filas, matriz ;

non terminal parametros, invocaFunc ,exprP;


non terminal literal ,operandoUnitario, operandoArit,operacionArit,exprAritNegacion;
non terminal cambiable,creacion,asignArit,creacionAsig,asignacion,asigCompuesta,asignacionUni;
non terminal exprArit,exprAritParentesis;
non terminal exprUni;

non terminal exprRel_I, exprRel_glob ,exprRel_par ,exprRel_neg, operandoLog, exprLog_I;
non terminal lista_read, lista_write, write, read, return_A;

non terminal for_B, while_B , doWhile_B, else_C, elif_C, if_C, optn, control;



non terminal expr, bloque, programa ;


non terminal inicio, decS, dec, funcMain, params;
//produccion de inicio
start with programa;



/*
------------------------------------------------------
TIPOS Y SIGNOS
------------------------------------------------------
*/
literal ::=  L_INTEGER | L_CHAR | L_STRING | L_FLOAT ;

tipoFunc ::= INTEGER_T | VOID_T | FLOAT_T | CHAR_T | BOLEANO_T; 

tipo ::= INTEGER_T | STRING_T | FLOAT_T | CHAR_T | BOLEANO_T;
/*signo ::= + | - | // | ~ | **    */
signo ::= SUMA_T | RESTA_T | MULTIPLICACION_T | POTENCIA_T | DIVISION_T | MODULO_T ;
/*signoComp ::= += | -= | //= | ~= | **=   */
signoComp ::= MAS_IGUAL_T | MENOS_IGUAL_T |  DIV_IGUAL_T | MOD_IGUAL_T | POT_IGUAL_T ;
/*operadorRel  < | > | <= | >= | != | == */
operadorRel ::= COMPARACION_T | DIFERENTE_T | MAYOR_IGUAL_T | MENOR_IGUAL_T | MAYOR_T | MENOR_T;
/*operadorLog::= ^ | # */
operadorLog ::= CONJUNCION_T | DISYUNCION_T;
/*boleano := Sol | Luna*/
boleano ::= FALSE_T | TRUE_T;
/*sigUnitario ::= ++ | --*/
sigUnitario ::= INCREMENTO_T | DECREMENTO_T;

/*
------------------------------------------------------
ARRAY
------------------------------------------------------
*/

cajaArray ::= CORCHETE_I operandoArit CORCHETE_D ;
defArray ::= cajaArray  
        | defArray cajaArray;
array ::= IDENTIFICADOR defArray;

/*
------------------------------------------------------
DECLARACION DE MATRIZ
------------------------------------------------------
*/

filas ::= operandoArit 
        | filas COMA operandoArit;

matriz ::= PIPE filas  PIPE ;
/*
------------------------------------------------------
LLAMAR FUNCIONES AUX
------------------------------------------------------
*/
parametros ::= operandoArit 
            | parametros COMA operandoArit |;

invocaFunc ::=  IDENTIFICADOR PARENTESIS_I parametros PARENTESIS_D ;  

/*
------------------------------------------------------
OPERANDOS
------------------------------------------------------
*/
operandoUnitario ::= IDENTIFICADOR sigUnitario | sigUnitario IDENTIFICADOR ;

operandoArit ::= literal | IDENTIFICADOR | invocaFunc  | exprAritParentesis 
                | boleano | matriz | array | operandoUnitario | exprAritNegacion;

/*
------------------------------------------------------
CREACION, ASIGNACION , CREACION-ASIGNACION (INCLUYE ARRAYS)
------------------------------------------------------
*/


cambiable ::= IDENTIFICADOR | array;

creacion ::= tipo cambiable | creacion COMA tipo cambiable | ;
asignArit ::= cambiable ASIGNA exprP ;
creacionAsig ::= tipo cambiable ASIGNA exprP ;
asignacion::= creacion | asignArit | creacionAsig;


asigCompuesta ::= cambiable signoComp exprArit; 

asignacionUni ::= asignacion  FINLINEA;

/*
------------------------------------------------------
EXPRESIONES RELACIONALES Y  LOGICAS
------------------------------------------------------
*/

exprArit ::= operandoArit
            | NEGACION_T operandoArit
            |  exprArit signo operandoArit;



exprRel_I ::=  exprArit operadorRel exprArit ;

operandoLog ::= asigCompuesta | exprRel_I  | exprArit  ;

exprLog_I ::= operandoLog  
            | exprLog_I  operadorLog operandoLog;

exprAritParentesis ::=  PARENTESIS_I exprLog_I PARENTESIS_D ;



exprP ::= exprLog_I;
exprUni ::= exprP FINLINEA ;


/*
------------------------------------------------------
READ - WRITE - RETURN 
------------------------------------------------------
*/

lista_read ::= OP_INSERT_T exprP
            | lista_read OP_INSERT_T exprP ;

read ::= CIN_T lista_read FINLINEA ; 

lista_write ::= OP_EXTRACT_T exprP
              | lista_write OP_EXTRACT_T exprP ;
              
write::= COUT_T lista_write FINLINEA ;

return_A::= RETURN_T exprP  FINLINEA | RETURN_T FINLINEA;

/*
------------------------------------------------------
FOR
------------------------------------------------------
*/

for_B::= FOR_T PARENTESIS_I asignacionUni exprUni exprP PARENTESIS_D LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T ;

/*
------------------------------------------------------
DO - WHILE
------------------------------------------------------
*/


while_B::= WHILE_T PARENTESIS_I exprP PARENTESIS_D LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T;

doWhile_B::= DO_T LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T WHILE_T PARENTESIS_I exprP PARENTESIS_D FINLINEA;

/*
------------------------------------------------------
ELSE - ELIF - IF
------------------------------------------------------
*/

else_C::= ELSE_T LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T ;

elif_C::= ELIF_T PARENTESIS_I exprP PARENTESIS_D LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T ;

if_C ::= IF_T PARENTESIS_I exprP PARENTESIS_D LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T;

optn ::= if_C | elif_C | else_C ;

/*
------------------------------------------------------
PRINCIPAL
------------------------------------------------------
*/
control::=  for_B | while_B | doWhile_B | optn ;

expr ::= exprUni | asignacionUni | read | write | return_A | control;
bloque ::= expr | bloque expr ;

params ::= PARENTESIS_I creacion  PARENTESIS_D ;


funcMain ::= tipoFunc IDENTIFICADOR params FINLINEA
            | tipoFunc IDENTIFICADOR params  LLAVE_ABIERTO_T bloque LLAVE_CERRADO_T;
dec ::= funcMain ; 

decS ::= dec
        | decS dec;

inicio ::= decS;

programa ::= {: hola();:} inicio {: adios();:} ;

