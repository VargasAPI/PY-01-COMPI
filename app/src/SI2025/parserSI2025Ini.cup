package ParserLexer;
import java_cup.runtime.*;
 
// utiliza class BasicLexerCup que genera el lexer .jflex, pequeños cambios de lo tomado de la página de cup
//cambios en parser code, init with y scan with {:
// este es el cup este es el analinzador lexico
// meter funciones en action code para la tabla de simbolos, agregar un simbolo a una tabla, generar un simbolo
// funciones java en action code








//----------------Asignaciones para las producciones--------------------------------
/**
    
    
  
    
**/





action code {:
 
    public void hola(){
        System.out.println("Hola");
    }
 
    public void adios(){
        System.out.println("Adios");
    }
:}
 
parser code {:
    BasicLexerCup lex;
   
    @SuppressWarnings("deprecation")
    public parser(BasicLexerCup lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
 
:}
 
init with {: :};
 
/* define how to connect to the scanner! */
scan with {: return lex.next_token(); :}
 
/* Terminales (tokens retornados por el scanner). */
terminal INTEGER_T, STRING_T, CHAR_T, FLOAT_T, BOLEANO_T;  /*tipos*/
terminal FALSE_T, TRUE_T;   /*boleano*/
terminal SUMA_T,RESTA_T, MULTIPLICACION_T,POTENCIA_T, DIVISION_T, MODULO_T; /*signo*/
terminal COMPARACION_T, DIFERENTE_T, MAYOR_IGUAL_T, MENOR_IGUAL_T, MAYOR_T, MENOR_T,MAS_IGUAL_T, MENOS_IGUAL_T; /*operadorRelacional*/
terminal ASIGNA, DIV_IGUAL_T, NO_IGUAL_T, INCREMENTO_T, DECREMENTO_T;
terminal CONJUNCION_T, NEGACION_T, DISYUNCION_T;  
terminal IF_T, ELSE_T,  DO_T, ELIF_T, WHILE_T, FOR_T, VOID_T, FINLINEA_T;
terminal RETURN_T,BREAK_T, COMA_T, CIN_T, COUT_T, COUT_COMENT_T;
terminal CIN_COMENT_T,LLAVE_ABIERTO_T,LLAVE_CERRADO_T, PARENTESISAC_T;

 
terminal L_INTEGER, L_STRING, IDENTIFICADOR, L_FLOAT, L_CHAR;
 
// no terminales
non terminal programa, lineas, linea, tipos, literal, boleano;
 
//produccion de inicio
start with programa;
 



programa ::= {: hola();:} lineas {: adios();:} ;
tipos ::= INTEGER_T | STRING_T | CHAR_T | BOLEANO_T | FLOAT_T ;
literal ::= L_INTEGER | L_STRING | L_FLOAT | L_CHAR | boleano;
boleano ::= FALSE_T | TRUE_T;
lineas ::= linea ;
lineas ::= lineas linea ;
linea ::= tipos IDENTIFICADOR ASIGNA literal FINLINEA_T ;


// asignArit::= IDENTIFICADOR ASIGNA_T operacionArit ;


// operacionArit::= operandos (signo operandos)*;

//----------------------Creacion, asignacion y creación-asignacion----------------
asignacion::= creacion | asignaci
creacion::= tipos IDENTIFICADOR




//-------------------------------------------------------------------------------

//-------------------------Tipos---------------------------------------------------
opRead::= L_INTEGER | L_FLOAT ;
opWrite::= L_INTEGER | L_FLOAT | BOLEANO_T | IDENTIFICADOR ; //FALTA CADENA

operandos::= INTEGER_T | FLOAT_T | IDENTIFICADOR | BOLEANO_T;//FALTA CADENA
operandos2::= INTEGER_T | FLOAT_T | IDENTIFICADOR | BOLEANO_T;
opReturn::= INTEGER_T | FLOAT_T | IDENTIFICADOR | BOLEANO_T; //FALTA CADENA

tipoFunc::= VOID_T | INTEGER_T | FLOAT_T | CHAR_T | BOLEANO_T ; 

//----------------------------------------------------------------------------








//----------------Signos---------------------------------------------------
signo::= SUMA_T | RESTA_T | MULTIPLICACION_T | DIVISION_T | POTENCIA_T | MODULO_T ;
signoComp::= MAS_IGUAL_T | MENOS_IGUAL_T | DIV_IGUAL_T | NO_IGUAL_T ;
operandorRel::= COMPARACION_T | MAYOR_T | MENOR_T | DIFERENTE_T | MAYOR_IGUAL_T | MENOR_IGUAL_T ;
 

sigUnitario::= INCREMENTO_T | DECREMENTO_T ;
//-------------------------------------------------------------------




