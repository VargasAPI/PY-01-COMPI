
<inicio> ::= <decS> <funcMain>
<decS> ::= <dec> | <decS> <dec>
<dec> ::= <func>
<func> ::= <tipoFunc> <id> "(" <args> ")" "{" <bloque> "}"  
        | <tipoFunc>  <id> "(" <args> ")" <endln>  
<funcMain> ::= "void" "main" "(" <args> ")" "{" <bloque> "}"   
        | "void" "main" "(" <args> ")" <endln>   
<args> ::= <tipo> <id> | (<tipo> <id> ","  )* <tipo>  <id>  
<bloque> ::= <expr> | <bloque> <expr>


<expr> ::= <asignacion> | <callFunAux> | <control> | <sentTerm> | <exprUni>
<control> ::=  <sent> | <while>  | <doWhile> | <for> | <arrays> 
<sentTerm> ::= <return> | <read> | <write> | <break> 


<callFunAux> ::=  <id> "(" <argsAux> ")" <endln> 

<argsAux> ::= <sendArgs> | <argsAux> "," <sendArgs>

<sendArgs> ::= <exprRelLog> | <paramCallfun>
<paramCallfun> ::=  <id> "(" <argsAux> ")" 



<asignacion> ::= <creacion>  | <asign> | <creacionAsig> 

<creacion> ::= <tipo>  <id>

<asign> ::= <id>   "="   <operacionArit> 

<creacionAsig> ::= <tipo>  <id> "=" <operacionArit> 

<asigCompuesta> ::= <id>  <signoComp>   <operacionArit> <endln>

<operacionArit> ::= <operandos> 
                | <negacion> <operandos> 
                | <operacionArit> <signo> <operandos> 
                | <negacion> "(" <operacionArit> <signo> <operandos> ")"

<exprUni> ::= <exprP> <endln>
<exprP> ::= <operacionArit> | <exprRelLog>

<exprRelLog> ::= <exprRel_I> | <exprLog_I>

<exprRel_I> ::= <operacionArit> 
			| <operacionArit> <operadorRel> <operacionArit>
			| <negacion> "(" <operacionArit> <operadorRel> <operacionArit> ")"

<exprLog_I> ::= <operandoLog>
			| <exprLog_I>  <operadorLog> <operandoLog>
			| <negacion> "(" <exprLog_I>  <operadorLog> <operandoLog> ")"

<operandoLog> ::= <operacionArit> | <exprRel_I> | <asigCompuesta>




<operadorUnitario> ::= <id> <incredecre> <endln> | <incredecre> <id> <endln>



<sent> ::= <optn> | <sent> <optn>

<optn> ::= <if> | <elif> | <else>

<if> ::= "if" "(" <exprRelLog> ")" "{" <bloque> "}"

<elif> ::= "elif" "(" <exprRelLog> ")" "{" <bloque>  "}" 

<else> ::= "else" "{" <exprRelLog> "}" 



<while> ::= "while(" <exprRelLog> ")" "{" <bloque> "}" <return> 


<doWhile> ::= "do{" <bloque>  "}" "while" "(" <exprRelLog> ")" <endln>


<for> ::= "for" "(" <inicializacion> <endln> <exprUni>  <operadorUnitario> ")" "{" <bloque> "}"
<inicializacion> ::= <asign> | <creacionAsig>

<arrays> ::= <decArray> | <asignArray>

<decArray> ::= <tipo>  <id> (<pipe> <entero> <pipe>)+ <endln>
<contenido_simple> ::=  <pipe> <operandos> <pipe> | <operandos>   
<contenido_multiple> ::=  (<contenido_simple> ",")* <contenido_simple>
<matriz_simple> ::= <pipe> <contenido_simple> <pipe>    
<matriz_multiple> ::= <pipe> (<pipe> <contenido_multiple> <pipe> ",")* <pipe> <contenido_multiple>  <pipe> <pipe> 
<defArray> ::=  <matriz_simple>  | <matriz_multiple>

<asignArray> ::=  <id> (<pipe> <entero> <pipe>)+ "=" <defArray>
<asignLista> ::= <id> (<pipe> <entero> <pipe>)+ 

<break> ::= <bloque> "break" <endln>
<return> ::= "return" <operandos> <endln> | "return" <endln>

<read> ::= "cin" (">>" <operandos>)*  <endln> 
<write> ::= "cout" ("<<" <operandos>)*  <endln> 


<id> ::= ([a-z] | [A-Z]) ([a-z] | [A-Z] | [0-9])* 

<operandos> ::= <entero> | <flotante> | <id> | <boleano> | <paramCallfun> | <asignLista> | <operadorUnitario>

<entero> ::= "0" | ([1-9] [0-9]*) | "-" ([1-9] [0-9]*) 
			
<flotante> ::= "0.0" | ([1-9] [0-9]*) "." ([0-9]+ [1-9]*) | "-" ([1-9] [0-9]*) "." ([0-9]+ [1-9]*)  

<tipo> ::= "int" | "string" | "float" | "char" | "bool"
<tipoFunc> ::= "void" | "int" | "float" | "char" | "bool"  
<boleano> ::=  "True" | "False"
<cadena> ::= "'" ([a-z] | [A-Z]) | ([a-z] | [A-Z]) | [0-9]* "'" 
<caracter> ::= "'" [a-z] "'" | "'" [A-Z] "'" | "'" [0-9] "'" 


<signo> ::= "+" | "-" | "}}" | "*" | "**" | "~"
<signoComp> ::= "+=" | "-=" | "}}=" | "**=" | "~="
<operadorRel> ::= "<" | ">" | "<=" | ">=" | "!=" | "==" 
<operadorLog> ::= <disyuncion> | <conjuncion>
<disyuncion> ::= "^"
<conjuncion> ::= "#"
<negacion> ::= "!"
<incredecre> ::= "++" | "--"
<comment> ::=  <comLine> | <comMulti> 
<comLine> ::= "@" <id>
<comMulti> ::= "{" <id> "}"
<parentesis> ::= "&"


<endln> ::= "?"
<pipe> ::= "|"


