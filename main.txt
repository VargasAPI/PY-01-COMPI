-----------------------definir funcion-------------------


<inicio> ::= <decS> <funcMain>
<decS> ::= <dec> 
<decS> ::= <decS> <dec>
<dec> ::= <func>
<func> ::= <tipoFunc> <id> "(" <args> ")" "\" <bloque> "/"  
<func> ::= <tipoFunc>  <id> "(" <args> ")" <endln>  
<funcMain> ::= "void" "main" "(" <args> ")" "\" <bloque> "/"   
<funcMain> ::= "void" "main" "(" <args> ")" <endln>   
<args> ::= <tipo> <id> | (<tipo> <id> ","  )* <tipo>  <id>  
<bloque> ::= <expr> | <bloque> <expr>

--------------------contenido funcion---------------------

<expr> ::= <asignacion> | <callFunAux> | <variosOU> | <control> | <sentTerm> | exprUni
<control> ::=  <sent> | <while>  | <doWhile> | <for> | <arrays> 
<sentTerm> ::= <return> | <read> | <write> | <break> 

------------------------llamado a funcion aux--------------------

<callFunAux> ::=  <id> "(" <argsAux> ")" <endln> 

<argsAux> ::= <sendArgs> 
<argsAux> ::= <argsAux> "," <sendArgs>

<sendArgs> ::= exprRelLog | <paramCallfun>
<paramCallfun> ::=  <id> "(" <argsAux> ")" 


----------------------Creacion, asignacion y creaci√≥n-asignacion----------------


<asignacion> ::= <creacion>  | <asign> | <creacionAsig> 

<creacion> ::= <tipo>  <id>

<asign> ::= <id>   "="   <operacionArit> 

<creacionAsig> ::= <tipo>  <id> "=" <operacionArit> 

<asigCompuesta> ::= <id>  <signoComp>   <operacionArit> <endln>

<operacionArit> ::= <operandos> 
<operacionArit> ::= <negacion> <operandos> 
<operacionArit> ::= <operacionArit> <signo> <operandos> 
<operacionArit> ::= <negacion> "(" <operacionArit> <signo> <operandos> ")"

---------------------expresiones-relacionales-logicas----------------
exprUni ::= exprP endln
exprP ::= operacionArit | exprRelLog

exprRelLog ::= exprRel_I | exprLog_I

exprRel_I ::= <operacionArit> 
exprRel_I ::= <operacionArit> <operadorRel> <operacionArit>
exprRel_I ::= <negacion> "(" <operacionArit> <operadorRel> <operacionArit> ")"

exprLog_I ::= operandoLog
exprLog_I ::= exprLog_I  operadorLog operandoLog
exprLog_I ::= <negacion> "(" exprLog_I  operadorLog operandoLog ")"

operandoLog ::= operacionArit | exprRel_I | asigCompuesta


-----------------------------operador-unitario---------------------


<operadorUnitario> ::= <id> <incredecre> <endln> | <incredecre> <id> <endln>

---------------------------------if---------------------------------

<sent> ::= <optn>
<sent> ::= <sent> <optn>

<optn> ::= <if> | <elif> | <else>

<if> ::= "if" "(" <exprRelLog> ")" "\" <bloque> "/"

<elif> ::= "elif" "(" <exprRelLog> ")" "\" <bloque>  "/" 

<else> ::= "else" "\" <exprRelLog> "/" 



------------------------------while--------------------------------------------

<while> ::= "while(" <exprRelLog> ")" "\" <bloque> "/" <return> 

------------------------------dowhile-------------------------------------------

<doWhile> ::= "do\" <bloque>  "/" "while" "(" <exprRelLog> ")" 

------------------------------for--------------------


<for> ::= "for" "(" <inicializacion> <exprRel> <endln> <variosOU> ")" "\" <bloque> "/"
<inicializacion> ::= <asign> | <creacionAsig>

---------------------------listas-------------------------

<arrays> ::= <decArray> | <asignArray>

<decArray> ::= <tipo>  <id> (<pipe> <entero> <pipe>)+ <endln>
<contenido_simple> ::=  <pipe> <operandos> <pipe> | <operandos>   
<contenido_multiple> ::=  (<contenido_simple> ",")* <contenido_simple>
<matriz_simple> ::= <pipe> <contenido_simple> <pipe>    
<matriz_multiple> ::= <pipe> (<pipe> <contenido_multiple> <pipe> ",")* <pipe> <contenido_multiple>  <pipe> <pipe> 
<defArray> ::=  <matriz_simple>  | <matriz_multiple>

<asignArray> ::=  <id> (<pipe> <entero> <pipe>)+ "=" <defArray>
<asignLista> ::= <id> (<pipe> <entero> <pipe>)+ 

-----------------------------write-print-return-break---------------------------------

<break> ::= <bloque> "break" <endln>
<return> ::= "return" <operandos> <endln> 
<return> ::= "return" <endln>

<read> ::= "cin" (">>" <operandos>)*  <endln> 
<write> ::= "cout" ("<<" <operandos>)*  <endln> 


-------------------------------------Tipos-----------------------------------------------

<id> ::= ([a-zA-Z_][a-zA-Z0-9_]*) 


<operandos> ::= <entero> | <flotante> | <id> | <boleano> | <paramCallfun> | <asignLista> | operadorUnitario



<entero> ::= "0" | ([1-9] [0-9]*) | "-" ([1-9] [0-9]*) 
			
<flotante> ::= "0.0" | ([1-9] [0-9]*) "." ([0-9]+ [1-9]*) | "-" ([1-9] [0-9]*) "." ([0-9]+ [1-9]*) 
<tipo> ::= "int" | "string" | "float" | "char" | "bool"
<tipoFunc> ::= "void" | "int" | "float" | "char" | "bool"  
<boleano> ::=  "True" | "False"
<cadena> ::= [".*"]
<caracter> ::= '([^'\)]|\).)' 

------------------------------------Signos ------------------------------------------


<signo> ::= "+" | "-" | "//" | "*" | "**" | "~"
<signoComp> ::= "+=" | "-=" | "//=" | "**=" | "~="
<operadorRel> ::= "<" | ">" | "<=" | ">=" | "!=" | "==" 
<disyuncion> ::= "^"
<conjuncion> ::= "#"
<negacion> ::= "!"
<incredecre> ::= "++" | "--"
<comment> ::=  <comLine> | <comMulti> 
<comLine> ::= "@" <id>
<comMulti> ::= "\" <id> "/"
<parentesis> ::= "&"

<salto> ::= "\n"
<endln> ::= "?"
<pipe> ::= "|"


